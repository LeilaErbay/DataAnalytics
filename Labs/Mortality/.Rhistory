install.packages(swirl)
install.packages("swirl")
source('~/.active-rstudio-document', echo=TRUE)
print(add(1,2))
print(add(1,2))
print(add(1,2))
print(add(10,20))
source('~/.active-rstudio-document', echo=TRUE)
print(add(1,2))
print(add(10,20))
source('~/.active-rstudio-document', echo=TRUE)
variable
source('~/.active-rstudio-document', echo=TRUE)
vector1
source('~/.active-rstudio-document', echo=TRUE)
vector2
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
19.71*1.15
install.packages("dslabs")
library(dslabs)
a<-1
b <-1, c<-1
b <-1
c <-1
a
print(a)
ls()
vector1
x
n
ls
source('~/.active-rstudio-document')
source('~/Untitled.R')
c<-1
(-b + sqrt(b^2 - 4*a*c))/(2*a)
(-b - sqrt(b^2 - 4*a*c))/(2*a)
source('~/Untitled.R', echo=TRUE)
x
library(dslabs)
data("murders")
data(murders)
class(murders)
View(murders)
str(murders)
murders $population
library(dslabs)
data(murders)
sort(murders)
data(total)
sort(total)
sort(murders,total)
library(slabs)
sort(murders$total)
index <- order(murders$total)
murders$abb[index]
kaggle competitions download -c titanic
kaggle competitions download -c titanic
library("ggplot2")
library('ggthemes')
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
library('scales')
library("ggthemes")
library("ggplot2-ggthemes")
library("ggtheme")
install.packages("ggthemes")
install.packages("scales")
install.packages("scales")
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("dplyr")
install.packages("mice")
install.packages("randomForest")
library('ggplot2')
library("ggthemes")
library("scales")
library("dplyr")
library("mice")
library("randomForest")
train <- read.csv('../input/train.csv', stringsAsFactors = F)
test  <- read.csv('../input/test.csv', stringsAsFactors = F)
kaggle competitions download -c titanic
kaggle competitions download -c titanic
?plot
source('~/Desktop/LevelNeu2018/R-Scripts/intro.R')
x<- 2
y <-3
x = y
x <- y
plot(c(0, 1), c(0, 1), type = "p")
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:boot", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:ggplot2", unload=TRUE)
install.packages(readxl)
install.packages("readxl")
browseVignettes("ggplot2")
"8isthebest" + 2
"8" + 2
"8" +2
8
typeof(8)
typeof(8L)
typeof(8.0L)
typeof(8.0)
typeof(8L)
as.integer("8")
typeof(8)
as.integer("8isthebest" + 2)
typeof(as.integer("8"))
?hist
?qqplot
qqplot(murders)
?plot
?ggplot
library(ggplot2)
?ggplot2
install.packages("grDevices")
install.packages("grDevices")
?tible
??tible
?read_excel
?readxl
?class
?typeof
which.max
?which.max
?sample
?set.seed
.Random.seed?
?.Random.seed
?binomial
?rbinom
trials <- numeric(length = 100)
#sum(rbinom(20,20, 0.618))
for(i in seq_along(trials)){
trials[i] <- sum(rbinom(1,20, 0.618))
}
trials <- numeric(length = 100)
#sum(rbinom(20,20, 0.618))
for(i in seq_along(trials)){
trials[i] <- sum(rbinom(1,20, 0.618))
}
hist(trials)
?binom?
?binom
?binom
trials <- numeric(length = 100)
#sum(rbinom(20,20, 0.618))
for(i in seq_along(trials)){
trials[i] <- sum(rbinom(20,1, 0.618))
}
hist(trials)
#
hist(rbinom(20,100, 0.618))
#
hist(sum(rbinom(20,100, 0.618)))
#
hist(rbinom(20,100, 0.618))
trials <- numeric(length = 100)
#sum(rbinom(20,20, 0.618))
for(i in seq_along(trials)){
trials[i] <- sum(rbinom(20,1, 0.618))
}
hist(trials)
mean(trials)
trials <- numeric(length = 1000)
#sum(rbinom(20,20, 0.618))
for(i in seq_along(trials)){
trials[i] <- sum(rbinom(20,1, 0.618))
}
mean(trials)
hist(trials)
trials <- numeric(length = 100)
#sum(rbinom(20,20, 0.618))
for(i in seq_along(trials)){
trials[i] <- sum(rbinom(20,1, 0.618))
}
mean(trials)
hist(trials)
var(trials)
trialsOt <- numeric(length=100)
for(i in seq_along(trialsOt)){
trialsOt[i] <- sum(rbinom(15,1,.414))
}
mean(trialsOt)
var(trialsOt)
meanW <- 3*meanOt + 2*meanOb + 10
varW <- 9*varOt + 4*varOb + 100
#p = 0.618
#n = 20
#size = 20
#
hist(rbinom(20,100, 0.618))
trials <- numeric(length = 100)
#sum(rbinom(20,20, 0.618))
for(i in seq_along(trials)){
trials[i] <- sum(rbinom(20,1, 0.618))
}
meanOb <-mean(trials)
varOb <-var(trials)
hist(trials)
#
trialsOt <- numeric(length=100)
for(i in seq_along(trialsOt)){
trialsOt[i] <- sum(rbinom(15,1,.414))
}
meanOt <-mean(trialsOt)
varOt <-var(trialsOt)
meanW <- 3*meanOb + 2*meanOt + 10
varW <- 9*varOb + 4*varOt + 100
varW <- 9*varOb + 4*varOt
n <- 1:15
ifelse(n %% 3 ==0 , "divisible by 3", "not divisible by 3")
df <- c(n,NULL)
df <- as.data.frame(c(n,NULL))
View(df)
df <- as.data.frame(c(n,result))
n <- 1:15
result <- NULL
df <- as.data.frame(c(n,result))
df <- as.data.frame(n)
View(df)
df <- cbind(NULL)
df <- cbind(result)
df <- as.data.frame(n)
df <- cbind(result)
df <- cbind(result)
result <- NA
df <- as.data.frame(n)
df <- cbind(result)
View(df)
df <- as.data.frame(n)
result <-ifelse(n %% 3 ==0 , "divisible by 3", "not divisible by 3")
df <- cbind(as.data.frame(result))
View(df)
n <- 1:15
df <- as.data.frame(n)
result <-ifelse(n %% 3 ==0 , "divisible by 3", "not divisible by 3")
df[,2] <- cbind(as.data.frame(result))
n <- 1:15
df <- as.data.frame(n)
df[,2] <- ifelse(n %% 3 ==0 , "divisible by 3", "not divisible by 3")
View(df)
?seq
?matrix
x <- matrix(NULL, 5,5)
for(i in 1:nrow(x)) {
for(j in 1:ncol(x)) {
x[i,j] <- (i+j)^2
}
x <- matrix(NULL, 5,5)
for(i in 1:nrow(x)) {
for(j in 1:ncol(x)) {
x[i,j] <- (i+j)^2
}
}
source('~/.active-rstudio-document', echo=TRUE)
x <- matrix(NULL, 5,5)
x <- matrix(NULL, 5,5)
x <- matrix(NA, 5,5)
x <- matrix(NA, 5,5)
for(i in 1:nrow(x)) {
for(j in 1:ncol(x)) {
x[i,j] <- (i+j)^2
}
}
View(x)
x <- matrix(NA, 5,5)
View(x)
for(i in 1:nrow(x)) {
for(j in 1:ncol(x)) {
x[i,j] <- (i+j)^2
}
}
df <- cbind(df,ifelse(n %% 3 ==0 , "divisible by 3", "not divisible by 3"))
n <- 1:15
df <- as.data.frame(n)
df <- cbind(df,ifelse(n %% 3 ==0 , "divisible by 3", "not divisible by 3"))
View(df)
lapply(list, function)
lapply
setwd("/Users/LeilaErbay/Desktop/LevelNeu2018/Labs/Lab9")
mortalityData <- as.data.frame(read.csv("Mortality Lab - Data.csv"))
?hist
View(mortalityData)
histMortality <- hist(mortalityData$Mortality)
histMortality <- hist(mortalityData$Mortality, xlab = "Number of Deaths", main = "Histogram of Mortality Rate")
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations")
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", ylim = max(mortalityData$NOx))
?max
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", ylim = max(mortalityData$NOx[]))
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", ylim = c(0,max(mortalityData$NOx)))
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations")
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", breaks = 10)
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", breaks = 20)
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", breaks = 300)
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", breaks = 30, xlim = max(mortalityData$NOx))
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", breaks = 30, xlim = c(0,max(mortalityData$NOx)))
names(mortalityData)[18] <- "LogNOx"
names(mortalityData)[18] <- "LogNOx"
mortalityData$LogNOx <- "LogNOx"
?log
#Computing the Log(Nox)
mortalityData$LogNOx <- log(mortalityData$NOx)
?lm
#plotting y = mortality , x = log(NOx)
plot(lm(formula = mortality~LogNOx, data = mortalityData ))
#plotting y = mortality , x = log(NOx)
plot(lm(formula = Mortality~LogNOx, data = mortalityData ))
#plotting y = mortality , x = log(NOx)
fit <- lm(formula = mortalityData$Mortality~mortalityData$LogNOx)
View(fit)
fit2 <-lm(formula = Mortality~LogNOx, data = mortalityData)
View(fit2)
plot(mortalityData$LogNOx, mortalityData$Mortality, xlab = "LogNOx levels", ylab = "Mortality Rate", main = "Mortality Rate against LogNOx Levels")
abline(fit)
?abline
abline(fit, col = "red")
?plot
View(fit)
#coefficients of lin reg.
coeff <- coefficients(fit)
View(fit)
######## MANUAL CALCULATIONS ############
meanMortality <- mean(mortalityData$Mortality)
?mean
?ave
histLogNOx <- hist(mortalityData$LogNOx, xlab= "Log Nitrous Oxide Concentrations", main= "Histogram of Log NOx Concentrations")
meanLogNOx <- mean(mortalityData$LogNOx)
sMortality <- sum((mortalityData$Mortality- meanMortality)^2)
sLogNOx <- sum((mortalityData$LogNOx- meanLogNOx)^2)
sXY <- sum((mortalityData$Mortality- meanMortality)(mortalityData$LogNOx- meanLogNOx))
sXY <- sum((mortalityData$Mortality- meanMortality)*(mortalityData$LogNOx- meanLogNOx))
meanMortality <- mean(mortalityData$Mortality)  #Y
meanLogNOx <- mean(mortalityData$LogNOx)        #X
sYY <- sum((mortalityData$Mortality- meanMortality)^2) #Syy
sXX <- sum((mortalityData$LogNOx- meanLogNOx)^2) #Sxx
sXY <- sum((mortalityData$Mortality- meanMortality)*(mortalityData$LogNOx- meanLogNOx))
slope <- sXY / sXX
intercept <- meanMortality - slope*meanLogNOx
sYY
sXX
sXY
###### PREDICTED MORTALITY ######
mortalityData$PredictedMortality <- "PredictedMortality"
mortalityData$Residuals <- "Residuals"
#y = mX + b --> predictedMortality = slope* logNOx + intercept
mortalityData$PredictedMortality <- slope * mortalityData$LogNOx + intercept
#Linear model based on estimate
fitPredict <- lm(PredictedMortality~LogNOx, data = mortalityData)
residualsPredict <- resid(fitPredict)
mortalityData$Residuals <- residualsPredict
View(fitPredict)
print(mortalityData[mortalityData$city == "Akron, OH", mortalityData$Residuals])
print(mortalityData[1, mortalityData$Residuals])
print(mortalityData[1, ])
histResiduals <- hist(mortalityData$Residuals, xlab = "Residuals based on Estimated Lin Regression", main = "Histogram of Residuals")
histResiduals <- hist(mortalityData$Residuals, xlab = "Residuals based on Estimated Lin Regression", main = "Histogram of Residuals", breaks = 100)
##### NORMALITY TESTING #######
histLogNOx <- hist(mortalityData$LogNOx, xlab= "Log Nitrous Oxide Concentrations", main= "Histogram of Log NOx Concentrations")
histResiduals <- hist(mortalityData$Residuals, xlab = "Residuals based on Estimated Lin Regression", main = "Histogram of Residuals", breaks = 100)
mortalityData$ActualResiduals <- resid(fit)
plot(mortalityData$LogNOx, mortalityData$Mortality, xlab = "LogNOx levels", ylab = "Mortality Rate", main = "Mortality Rate against LogNOx Levels")
#Linear model based on estimate
fitPredict <- lm(mortalityData$PredictedMortality~mortalityData$LogNOx)
residualsPredict <- resid(fitPredict)
mortalityData$Residuals <- residualsPredict
#plotting y = mortality , x = log(NOx) -- SIMPLE LIN REGRESSION
fit <- lm(formula = mortalityData$Mortality~mortalityData$LogNOx)
View(fit)
hist(mortalityData$ActualResiduals)
plot(mortalityData$LogNOx,mortalityData$PredictedMortality)
plot(mortalityData$LogNOx, mortalityData$Mortality, xlab = "LogNOx levels", ylab = "Mortality Rate", main = "Mortality Rate against LogNOx Levels")
plot(mortalityData$LogNOx,mortalityData$PredictedMortality)
min(mortalityData$Residuals)
plot(mortalityData$LogNOx,mortalityData$PredictedMortality)
plot(mortalityData$LogNOx, mortalityData$Mortality, xlab = "LogNOx levels", ylab = "Mortality Rate", main = "Mortality Rate against LogNOx Levels")
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit)
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit)
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit)
plot(fit)
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit, xlab = "y values")
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit, xlab ="y values")
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit)
#PREDICTED
plot(fitPredict)
#PREDICTED
plot(fitPredict, xlab = "y values")
#PREDICTED
plot(fitPredict)
#Actual
rSqActual <- cor(fit)^2
######## Coefficient of Determination ###
#Actual
rSqActual <- cor(mortalityData$LogNOx, mortalityData$Mortality)^2
rSqPredict <- cor(mortalityData$LogNOx, mortalityData$PredictedMortality)^2
hist(mortalityData$ActualResiduals)
hist(mortalityData$ActualResiduals, xlab = "Observed Residuals", main = "Histogram of Observed Residuals")
min(mortalityData$Residuals, xlab = "Predicted Residuals", main = "Histogram of Predicted Residuals")
min(mortalityData$Residuals, xlab = "Predicted Residuals", main = "Histogram of Predicted Residuals")
histResiduals <- hist(mortalityData$Residuals, xlab = "Residuals based on Estimated Lin Regression", main = "Histogram of Residuals", breaks = 100)
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit)
#PREDICTED
plot(fitPredict)
#PREDICTED
plot(fitPredict)
setwd("/Users/LeilaErbay/Desktop/LevelNeu2018/Labs/Lab9")
mortalityData <- as.data.frame(read.csv("Mortality Lab - Data.csv"))
########### (a) ###############
histMortality <- hist(mortalityData$Mortality, xlab = "Number of Deaths", main = "Histogram of Mortality Rate")
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", breaks = 30, xlim = c(0,max(mortalityData$NOx)))
mortalityData$LogNOx <- "LogNOx"
#Computing the Log(Nox)
mortalityData$LogNOx <- log(mortalityData$NOx)
#plotting y = mortality , x = log(NOx) -- SIMPLE LIN REGRESSION
fit <- lm(formula = mortalityData$Mortality~mortalityData$LogNOx)
plot(mortalityData$LogNOx, mortalityData$Mortality, xlab = "LogNOx levels", ylab = "Mortality Rate", main = "Mortality Rate against LogNOx Levels")
abline(fit, col = "red")
#coefficients of lin reg.
coeff <- coefficients(fit)  #<--- Y = b0 + b1X + E
## Y-int = 905.6, slope =15.1
######## MANUAL CALCULATIONS ############
meanMortality <- mean(mortalityData$Mortality)  #Y
meanLogNOx <- mean(mortalityData$LogNOx)        #X
sYY <- sum((mortalityData$Mortality- meanMortality)^2) #Syy
sXX <- sum((mortalityData$LogNOx- meanLogNOx)^2) #Sxx
sXY <- sum((mortalityData$Mortality- meanMortality)*(mortalityData$LogNOx- meanLogNOx))
slope <- sXY / sXX  #905.61
intercept <- meanMortality - slope*meanLogNOx  #15.098
###### PREDICTED MORTALITY ######
mortalityData$PredictedMortality <- "PredictedMortality"
mortalityData$Residuals <- "Residuals"
#y = mX + b --> predictedMortality = slope* logNOx + intercept
mortalityData$PredictedMortality <- slope * mortalityData$LogNOx + intercept
##### NORMALITY TESTING #######
histLogNOx <- hist(mortalityData$LogNOx, xlab= "Log Nitrous Oxide Concentrations", main= "Histogram of Log NOx Concentrations")
mortalityData$ActualResiduals <- resid(fit)
hist(mortalityData$ActualResiduals, xlab = "Observed Residuals", main = "Histogram of Observed Residuals")
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit)
rSqActual <- cor(mortalityData$LogNOx, mortalityData$Mortality)^2
#TITLE: MORTALITY LAB
#AUTHOR: LEILA ERBAY
setwd("/Users/LeilaErbay/Desktop/LevelNeu2018/Labs/Lab9")
mortalityData <- as.data.frame(read.csv("Mortality Lab - Data.csv"))
########### (a) ###############
histMortality <- hist(mortalityData$Mortality, xlab = "Number of Deaths", main = "Histogram of Mortality Rate")
histNOx <- hist(mortalityData$NOx, xlab = "Nitrous Oxide Concentration", main= "Histogram of NOx Concentrations", breaks = 30, xlim = c(0,max(mortalityData$NOx)))
mortalityData$LogNOx <- "LogNOx"
#Computing the Log(Nox)
mortalityData$LogNOx <- log(mortalityData$NOx)
#plotting y = mortality , x = log(NOx) -- SIMPLE LIN REGRESSION
fit <- lm(formula = mortalityData$Mortality~mortalityData$LogNOx)
plot(mortalityData$LogNOx, mortalityData$Mortality, xlab = "LogNOx levels", ylab = "Mortality Rate", main = "Mortality Rate against LogNOx Levels")
abline(fit, col = "red")
#coefficients of lin reg.
coeff <- coefficients(fit)  #<--- Y = b0 + b1X + E
## Y-int = 905.6, slope =15.1
######## MANUAL CALCULATIONS ############
meanMortality <- mean(mortalityData$Mortality)  #Y
meanLogNOx <- mean(mortalityData$LogNOx)        #X
sYY <- sum((mortalityData$Mortality- meanMortality)^2) #Syy
sXX <- sum((mortalityData$LogNOx- meanLogNOx)^2) #Sxx
sXY <- sum((mortalityData$Mortality- meanMortality)*(mortalityData$LogNOx- meanLogNOx))
slope <- sXY / sXX  #905.61
intercept <- meanMortality - slope*meanLogNOx  #15.098
###### PREDICTED MORTALITY ######
mortalityData$PredictedMortality <- "PredictedMortality"
mortalityData$Residuals <- "Residuals"
#y = mX + b --> predictedMortality = slope* logNOx + intercept
mortalityData$PredictedMortality <- slope * mortalityData$LogNOx + intercept
##### NORMALITY TESTING #######
histLogNOx <- hist(mortalityData$LogNOx, xlab= "Log Nitrous Oxide Concentrations", main= "Histogram of Log NOx Concentrations")
mortalityData$Residuals <- resid(fit)
hist(mortalityData$ActualResiduals, xlab = "Observed Residuals", main = "Histogram of Observed Residuals")
###### HOMOSCEDASTICITY   ##########
#ACTUAL
plot(fit)
rSqActual <- cor(mortalityData$LogNOx, mortalityData$Mortality)^2
